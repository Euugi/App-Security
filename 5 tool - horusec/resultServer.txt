patryk@Latitude:~/Desktop/AppSecurity/InsecureCommunicationServer$ horusec start -p .
WARN[0000] {HORUSEC_CLI} Config file not found          
WARN[0000] {HORUSEC_CLI} When starting the analysis WE SKIP A TOTAL OF 61 FILES that are not considered to be analyzed. To see more details use flag --log-level=debug 

WARN[0000] Horusec will return a timeout after 600 seconds. This time can be customized in the cli settings. 

WARN[0000] {HORUSEC_CLI} PLEASE DON'T REMOVE ".horusec" FOLDER BEFORE THE ANALYSIS FINISH! Don’t worry, we’ll remove it after the analysis ends automatically! Project sent to folder in location: [/home/patryk/Desktop/AppSecurity/InsecureCommunicationServer/.horusec/7ad1f7fb-833e-428c-ae87-fcb2e0c51077] 



==================================================================================

HORUSEC ENDED THE ANALYSIS WITH STATUS OF "success" AND WITH THE FOLLOWING RESULTS:

==================================================================================

Analysis StartedAt: 2022-11-26 19:01:21
Analysis FinishedAt: 2022-11-26 19:01:57

==================================================================================

Language: Leaks
Severity: CRITICAL
Line: 40
Column: 44
SecurityTool: HorusecEngine
Confidence: MEDIUM
File: /home/patryk/Desktop/AppSecurity/InsecureCommunicationServer/app/src/main/java/com/example/insecurecommunicationserver/MainActivity.java
Code: private static final char[] TRUST_STORE_PWD = "abc123".toCharArray();
RuleID: HS-LEAKS-26
Type: Vulnerability
ReferenceHash: 473a75b8379afe545ad85c56d247b529352c35ccfa954479fbc2636e786dc671
Details: (1/1) * Possible vulnerability detected: Hard-coded password
The software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.

==================================================================================

Language: Leaks
Severity: CRITICAL
Line: 42
Column: 42
SecurityTool: HorusecEngine
Confidence: MEDIUM
File: /home/patryk/Desktop/AppSecurity/InsecureCommunicationServer/app/src/main/java/com/example/insecurecommunicationserver/MainActivity.java
Code: private static final char[] KEY_STORE_PWD = "abc123".toCharArray();
RuleID: HS-LEAKS-26
Type: Vulnerability
ReferenceHash: 1b23d100541193eecc9bebff45a5a664791ddc887a2109bd3b9b9f90661e791e
Details: (1/1) * Possible vulnerability detected: Hard-coded password
The software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.

==================================================================================

Language: Leaks
Severity: CRITICAL
Line: 0
Column: 0
SecurityTool: HorusecEngine
Confidence: MEDIUM
File: /home/patryk/Desktop/AppSecurity/InsecureCommunicationServer/report.sarif
Code: 
RuleID: HS-LEAKS-25
Type: Vulnerability
ReferenceHash: c1127ac68678424f97c2306c1ece5cd0053ffb11e7d433dfd207cd8471595a9d
Details: (1/1) * Possible vulnerability detected: Potential Hard-coded credential
The software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.

==================================================================================

Language: Leaks
Severity: CRITICAL
Line: 0
Column: 0
SecurityTool: HorusecEngine
Confidence: MEDIUM
File: /home/patryk/Desktop/AppSecurity/InsecureCommunicationServer/report.sarif
Code: 
RuleID: HS-LEAKS-25
Type: Vulnerability
ReferenceHash: c1127ac68678424f97c2306c1ece5cd0053ffb11e7d433dfd207cd8471595a9d
Details: (1/1) * Possible vulnerability detected: Potential Hard-coded credential
The software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.

==================================================================================

Language: Leaks
Severity: CRITICAL
Line: 0
Column: 0
SecurityTool: HorusecEngine
Confidence: MEDIUM
File: /home/patryk/Desktop/AppSecurity/InsecureCommunicationServer/report.sarif
Code: 
RuleID: HS-LEAKS-25
Type: Vulnerability
ReferenceHash: c1127ac68678424f97c2306c1ece5cd0053ffb11e7d433dfd207cd8471595a9d
Details: (1/1) * Possible vulnerability detected: Potential Hard-coded credential
The software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.

==================================================================================

Language: Leaks
Severity: CRITICAL
Line: 0
Column: 0
SecurityTool: HorusecEngine
Confidence: MEDIUM
File: /home/patryk/Desktop/AppSecurity/InsecureCommunicationServer/report.sarif
Code: 
RuleID: HS-LEAKS-25
Type: Vulnerability
ReferenceHash: c1127ac68678424f97c2306c1ece5cd0053ffb11e7d433dfd207cd8471595a9d
Details: (1/1) * Possible vulnerability detected: Potential Hard-coded credential
The software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.

==================================================================================

Language: Leaks
Severity: CRITICAL
Line: 545
Column: 430
SecurityTool: HorusecEngine
Confidence: MEDIUM
File: /home/patryk/Desktop/AppSecurity/InsecureCommunicationServer/.checkmate/db.sqlite
Code: PIKey", "file": "app/src/main/java/com/example/insecurecommunicationserver/MainActivity.java", "line
RuleID: HS-LEAKS-25
Type: Vulnerability
ReferenceHash: fdf8c1a6c3f211bbc44c62af230af27c67aa2f3eba4b564a5ae10ecef0fa8df4
Details: (1/1) * Possible vulnerability detected: Potential Hard-coded credential
The software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. For more information checkout the CWE-798 (https://cwe.mitre.org/data/definitions/798.html) advisory.

==================================================================================

Language: Java
Severity: HIGH
Line: 40
Column: 10
SecurityTool: HorusecEngine
Confidence: LOW
File: /home/patryk/Desktop/AppSecurity/InsecureCommunicationServer/app/src/main/java/com/example/insecurecommunicationserver/EncryptData.java
Code: } catch (Exception ignored) {
RuleID: HS-JAVA-63
Type: Vulnerability
ReferenceHash: b298b0f0f58024c8ea5e70d22a1c5aff027750d2d67f71ef80565cdd1c92b016
Details: (1/1) * Possible vulnerability detected: Information Exposure Through An Error Message
The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. For more information checkout the CWE-209 (https://cwe.mitre.org/data/definitions/209.html) advisory.

==================================================================================

Language: Java
Severity: HIGH
Line: 64
Column: 24
SecurityTool: HorusecEngine
Confidence: LOW
File: /home/patryk/Desktop/AppSecurity/InsecureCommunicationServer/app/src/main/java/com/example/insecurecommunicationserver/EncryptData.java
Code: Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
RuleID: HS-JAVA-110
Type: Vulnerability
ReferenceHash: fee12fa41b6181ddf296b1b399830f981a9a679b97af192d93fb7c2952554144
Details: (1/1) * Possible vulnerability detected: Weak block mode for Cryptographic Hash Function
A weak ECB, (a.k.a 'block mode') was found in one of your Ciphers. Always use a strong, high entropy hash, for example the SHA-512 with salt options. For more information check CWE-327 (https://cwe.mitre.org/data/definitions/327.html), CWE-719 (https://cwe.mitre.org/data/definitions/719.html), CWE-326 (https://cwe.mitre.org/data/definitions/326.html) and CWE-780 (https://cwe.mitre.org/data/definitions/780.html) for deeper details on how to fix it.

==================================================================================

Language: Java
Severity: HIGH
Line: 74
Column: 28
SecurityTool: HorusecEngine
Confidence: LOW
File: /home/patryk/Desktop/AppSecurity/InsecureCommunicationServer/app/src/main/java/com/example/insecurecommunicationserver/EncryptData.java
Code: Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
RuleID: HS-JAVA-110
Type: Vulnerability
ReferenceHash: 28f6032b13915d9e2c42b37432429d01026454dd5277de329525b17fd19543c5
Details: (1/1) * Possible vulnerability detected: Weak block mode for Cryptographic Hash Function
A weak ECB, (a.k.a 'block mode') was found in one of your Ciphers. Always use a strong, high entropy hash, for example the SHA-512 with salt options. For more information check CWE-327 (https://cwe.mitre.org/data/definitions/327.html), CWE-719 (https://cwe.mitre.org/data/definitions/719.html), CWE-326 (https://cwe.mitre.org/data/definitions/326.html) and CWE-780 (https://cwe.mitre.org/data/definitions/780.html) for deeper details on how to fix it.

==================================================================================

Language: Java
Severity: HIGH
Line: 64
Column: 24
SecurityTool: HorusecEngine
Confidence: LOW
File: /home/patryk/Desktop/AppSecurity/InsecureCommunicationServer/app/src/main/java/com/example/insecurecommunicationserver/EncryptData.java
Code: Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
RuleID: HS-JAVA-110
Type: Vulnerability
ReferenceHash: fee12fa41b6181ddf296b1b399830f981a9a679b97af192d93fb7c2952554144
Details: (1/1) * Possible vulnerability detected: Weak block mode for Cryptographic Hash Function
A weak ECB, (a.k.a 'block mode') was found in one of your Ciphers. Always use a strong, high entropy hash, for example the SHA-512 with salt options. For more information check CWE-327 (https://cwe.mitre.org/data/definitions/327.html), CWE-719 (https://cwe.mitre.org/data/definitions/719.html), CWE-326 (https://cwe.mitre.org/data/definitions/326.html) and CWE-780 (https://cwe.mitre.org/data/definitions/780.html) for deeper details on how to fix it.

==================================================================================

Language: Java
Severity: HIGH
Line: 74
Column: 28
SecurityTool: HorusecEngine
Confidence: LOW
File: /home/patryk/Desktop/AppSecurity/InsecureCommunicationServer/app/src/main/java/com/example/insecurecommunicationserver/EncryptData.java
Code: Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
RuleID: HS-JAVA-110
Type: Vulnerability
ReferenceHash: 28f6032b13915d9e2c42b37432429d01026454dd5277de329525b17fd19543c5
Details: (1/1) * Possible vulnerability detected: Weak block mode for Cryptographic Hash Function
A weak ECB, (a.k.a 'block mode') was found in one of your Ciphers. Always use a strong, high entropy hash, for example the SHA-512 with salt options. For more information check CWE-327 (https://cwe.mitre.org/data/definitions/327.html), CWE-719 (https://cwe.mitre.org/data/definitions/719.html), CWE-326 (https://cwe.mitre.org/data/definitions/326.html) and CWE-780 (https://cwe.mitre.org/data/definitions/780.html) for deeper details on how to fix it.

==================================================================================

Language: Java
Severity: HIGH
Line: 10
Column: 7
SecurityTool: HorusecEngine
Confidence: LOW
File: /home/patryk/Desktop/AppSecurity/InsecureCommunicationServer/app/src/main/java/com/example/insecurecommunicationserver/EncryptData.java
Code: import javax.crypto.Cipher;
RuleID: HS-JAVA-123
Type: Vulnerability
ReferenceHash: 8087c2acf0a390334fa07aa5b3ef3cabe54c3483fd9e7077826589b9bed245db
Details: (1/1) * Possible vulnerability detected:  Crypto import
 Crypto import

==================================================================================

Language: Java
Severity: HIGH
Line: 11
Column: 7
SecurityTool: HorusecEngine
Confidence: LOW
File: /home/patryk/Desktop/AppSecurity/InsecureCommunicationServer/app/src/main/java/com/example/insecurecommunicationserver/EncryptData.java
Code: import javax.crypto.SecretKey;
RuleID: HS-JAVA-123
Type: Vulnerability
ReferenceHash: 587ffa951dec780b1c88f8eb71f72d2c1aa3f25b5897cb86cd0e850a287ec486
Details: (1/1) * Possible vulnerability detected:  Crypto import
 Crypto import

==================================================================================

Language: Java
Severity: HIGH
Line: 12
Column: 7
SecurityTool: HorusecEngine
Confidence: LOW
File: /home/patryk/Desktop/AppSecurity/InsecureCommunicationServer/app/src/main/java/com/example/insecurecommunicationserver/EncryptData.java
Code: import javax.crypto.spec.IvParameterSpec;
RuleID: HS-JAVA-123
Type: Vulnerability
ReferenceHash: 0384c2e4e5cdab47eb9fa8aab320812cb93157bd96d6e5770d2d1f185a216aa5
Details: (1/1) * Possible vulnerability detected:  Crypto import
 Crypto import

==================================================================================

Language: Java
Severity: HIGH
Line: 13
Column: 7
SecurityTool: HorusecEngine
Confidence: LOW
File: /home/patryk/Desktop/AppSecurity/InsecureCommunicationServer/app/src/main/java/com/example/insecurecommunicationserver/EncryptData.java
Code: import javax.crypto.spec.SecretKeySpec;
RuleID: HS-JAVA-123
Type: Vulnerability
ReferenceHash: fcae1601de6214fe24dfe4340e96233b21d57be2e998921b38b1d364259ab85b
Details: (1/1) * Possible vulnerability detected:  Crypto import
 Crypto import

==================================================================================

Language: Java
Severity: HIGH
Line: 48
Column: 47
SecurityTool: HorusecEngine
Confidence: LOW
File: /home/patryk/Desktop/AppSecurity/InsecureCommunicationServer/app/src/main/java/com/example/insecurecommunicationserver/EncryptData.java
Code: hex.append(String.format("%02x", b & 0xFF));
RuleID: HS-JAVA-143
Type: Vulnerability
ReferenceHash: 0fee9f2dc24ad36372553bbf7e99ee3f12094df63d7c5c3a1a0029d25c4cf8b8
Details: (1/1) * Possible vulnerability detected: Bad hexadecimal concatenation
When converting a byte array containing a hash signature to a human readable string, a conversion mistake can be made if the array is read byte by byte. The following sample illustrates the use of the method Integer.toHexString() which will trim any leading zeroes from each byte of the computed hash value. For more information checkout the CWE-704 (https://cwe.mitre.org/data/definitions/704.html) advisory.

==================================================================================

Language: Java
Severity: HIGH
Line: 126
Column: 22
SecurityTool: HorusecEngine
Confidence: LOW
File: /home/patryk/Desktop/AppSecurity/InsecureCommunicationServer/app/src/main/java/com/example/insecurecommunicationserver/MainActivity.java
Code: } catch (Exception e) {
RuleID: HS-JAVA-63
Type: Vulnerability
ReferenceHash: a4c7de3adf17e75b71af5a50a5ccbfe3ce2e9a0841112fa4510e6bc5632b4256
Details: (1/1) * Possible vulnerability detected: Information Exposure Through An Error Message
The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. For more information checkout the CWE-209 (https://cwe.mitre.org/data/definitions/209.html) advisory.

==================================================================================

Language: Java
Severity: HIGH
Line: 71
Column: 10
SecurityTool: HorusecEngine
Confidence: LOW
File: /home/patryk/Desktop/AppSecurity/InsecureCommunicationServer/app/src/main/java/com/example/insecurecommunicationserver/TLSServer.java
Code: } catch (Exception e ) {
RuleID: HS-JAVA-63
Type: Vulnerability
ReferenceHash: 1bbda3424406ac3de8c5ff97a14b7b6155cff36d6055c6c12886b8d48ae99a6a
Details: (1/1) * Possible vulnerability detected: Information Exposure Through An Error Message
The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. For more information checkout the CWE-209 (https://cwe.mitre.org/data/definitions/209.html) advisory.

==================================================================================

Language: Java
Severity: MEDIUM
Line: 58
Column: 20
SecurityTool: HorusecEngine
Confidence: MEDIUM
File: /home/patryk/Desktop/AppSecurity/InsecureCommunicationServer/app/src/main/java/com/example/insecurecommunicationserver/EncryptData.java
Code: byte[] IV = new byte[16];
RuleID: HS-JAVA-78
Type: Vulnerability
ReferenceHash: 2bec3a9eedd86d71e9184d74a709b6794bd2cd538739818a45f2de6ba3ed77b1
Details: (1/1) * Possible vulnerability detected: Static IV
Initialization vector must be regenerated for each message to be encrypted. For more information checkout the CWE-329 (https://cwe.mitre.org/data/definitions/329.html) advisory

==================================================================================

Language: Java
Severity: MEDIUM
Line: 3
Column: 7
SecurityTool: HorusecEngine
Confidence: LOW
File: /home/patryk/Desktop/AppSecurity/InsecureCommunicationServer/app/src/main/java/com/example/insecurecommunicationserver/EncryptData.java
Code: import android.util.Base64;
RuleID: HS-JVM-38
Type: Vulnerability
ReferenceHash: d5b72dd69ec9f1147ded9d25b4434775abf9ff2cd601dfbaee963e8cc0f7c296
Details: (1/2) * Possible vulnerability detected: Base64 Encode
Basic authentication's only means of obfuscation is Base64 encoding. Since Base64 encoding is easily recognized and reversed, it offers only the thinnest veil of protection to your users, and should not be used.
         
(2/2) * Possible vulnerability detected: Base64 Decode
Base64 Decode

==================================================================================

Language: Java
Severity: MEDIUM
Line: 94
Column: 21
SecurityTool: HorusecEngine
Confidence: LOW
File: /home/patryk/Desktop/AppSecurity/InsecureCommunicationServer/app/src/main/java/com/example/insecurecommunicationserver/EncryptData.java
Code: oString(IV, Base64.NO_WRAP)+'$'+Base64.encodeToString(cipherText, Base64.NO_WRAP);
RuleID: HS-JVM-38
Type: Vulnerability
ReferenceHash: 1f7dce4f090b7da49a98d75e13d21bb5bed61445884f10d48dc409c91340348a
Details: (1/1) * Possible vulnerability detected: Base64 Encode
Basic authentication's only means of obfuscation is Base64 encoding. Since Base64 encoding is easily recognized and reversed, it offers only the thinnest veil of protection to your users, and should not be used.

==================================================================================

Language: Java
Severity: MEDIUM
Line: 94
Column: 67
SecurityTool: HorusecEngine
Confidence: LOW
File: /home/patryk/Desktop/AppSecurity/InsecureCommunicationServer/app/src/main/java/com/example/insecurecommunicationserver/EncryptData.java
Code: oString(cipherText, Base64.NO_WRAP);
RuleID: HS-JVM-38
Type: Vulnerability
ReferenceHash: 8fb5f8563d2f263710e930b5894158790f52355a01affdd703b0c977de45bb1a
Details: (1/1) * Possible vulnerability detected: Base64 Encode
Basic authentication's only means of obfuscation is Base64 encoding. Since Base64 encoding is easily recognized and reversed, it offers only the thinnest veil of protection to your users, and should not be used.

==================================================================================

Language: Java
Severity: LOW
Line: 104
Column: 26
SecurityTool: HorusecEngine
Confidence: LOW
File: /home/patryk/Desktop/AppSecurity/InsecureCommunicationServer/app/src/main/java/com/example/insecurecommunicationserver/EncryptData.java
Code: byte[] IV = Base64.decode(recMsgSplit[0], Base64.DEFAULT);
RuleID: HS-JVM-24
Type: Vulnerability
ReferenceHash: ff586782954800dcbc016f062794607bcdf3f060be48be7ec2eb1d5155e5f83f
Details: (1/1) * Possible vulnerability detected: Base64 Decode
Base64 Decode

==================================================================================

Language: Java
Severity: LOW
Line: 105
Column: 34
SecurityTool: HorusecEngine
Confidence: LOW
File: /home/patryk/Desktop/AppSecurity/InsecureCommunicationServer/app/src/main/java/com/example/insecurecommunicationserver/EncryptData.java
Code: byte[] cipherText = Base64.decode(recMsgSplit[1], Base64.DEFAULT);
RuleID: HS-JVM-24
Type: Vulnerability
ReferenceHash: f21fe6460e1728ebf7ec0b6fef6c6b23bf49ea2f722f71ba6d8540749f32d57e
Details: (1/1) * Possible vulnerability detected: Base64 Decode
Base64 Decode

==================================================================================

Language: Java
Severity: LOW
Line: 67
Column: 18
SecurityTool: HorusecEngine
Confidence: LOW
File: /home/patryk/Desktop/AppSecurity/InsecureCommunicationServer/app/src/main/java/com/example/insecurecommunicationserver/MainActivity.java
Code: etMessage.setVisibility(View.GONE);
RuleID: HS-JAVA-109
Type: Vulnerability
ReferenceHash: 6022b95b7b96c5cab82912c89f49569374454ce2c4c3f9af08431da7e1f7544a
Details: (1/1) * Possible vulnerability detected: Hidden elements
Hidden elements in view can be used to hide data from user. But this data can be leaked. For more information checkout the CWE-919 (https://cwe.mitre.org/data/definitions/919.html) advisory.

==================================================================================

Language: Java
Severity: LOW
Line: 68
Column: 16
SecurityTool: HorusecEngine
Confidence: LOW
File: /home/patryk/Desktop/AppSecurity/InsecureCommunicationServer/app/src/main/java/com/example/insecurecommunicationserver/MainActivity.java
Code: btnSend.setVisibility(View.GONE);
RuleID: HS-JAVA-109
Type: Vulnerability
ReferenceHash: deb0f9ab4bf599962eb8d05151b1f7e436816843abe9364941dae30c7cad9cd7
Details: (1/1) * Possible vulnerability detected: Hidden elements
Hidden elements in view can be used to hide data from user. But this data can be leaked. For more information checkout the CWE-919 (https://cwe.mitre.org/data/definitions/919.html) advisory.

==================================================================================

Language: Java
Severity: LOW
Line: 135
Column: 43
SecurityTool: HorusecEngine
Confidence: LOW
File: /home/patryk/Desktop/AppSecurity/InsecureCommunicationServer/app/src/main/java/com/example/insecurecommunicationserver/MainActivity.java
Code: encryptionPass.setVisibility(View.GONE);
RuleID: HS-JAVA-109
Type: Vulnerability
ReferenceHash: 16167d54a000bef210b466d7a591ac8b1c5e18855933b07c2c0ccee0c0ac95b1
Details: (1/1) * Possible vulnerability detected: Hidden elements
Hidden elements in view can be used to hide data from user. But this data can be leaked. For more information checkout the CWE-919 (https://cwe.mitre.org/data/definitions/919.html) advisory.

==================================================================================

In this analysis, a total of 28 possible vulnerabilities were found and we classified them into:
Total of Vulnerability CRITICAL is: 7
Total of Vulnerability HIGH is: 12
Total of Vulnerability MEDIUM is: 4
Total of Vulnerability LOW is: 5

==================================================================================


WARN[0036] {HORUSEC_CLI} No authorization token was found, your code it is not going to be sent to horusec. Please enter a token with the -a flag to configure and save your analysis 

WARN[0036] {HORUSEC_CLI} 28 VULNERABILITIES WERE FOUND IN YOUR CODE SENT TO HORUSEC, TO SEE MORE DETAILS USE THE LOG LEVEL AS DEBUG AND TRY AGAIN 

WARN[0036] {HORUSEC_CLI} Horusec not show info vulnerabilities in this analysis, to see info vulnerabilities add option "--information-severity=true". For more details use (horusec start --help) command. 

